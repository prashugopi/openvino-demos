# /*******************************************************************************
#  * Copyright 2018 Dell Inc.
#  *
#  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
#  * in compliance with the License. You may obtain a copy of the License at
#  *
#  * http://www.apache.org/licenses/LICENSE-2.0
#  *
#  * Unless required by applicable law or agreed to in writing, software distributed under the License
#  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  * or implied. See the License for the specific language governing permissions and limitations under
#  * the License.
#  *
#  * @author: Jim White, Dell
#  * EdgeX Foundry, Edinburgh, version 1.0.1
#  * added: July 26, 2019
#  *******************************************************************************/

# NOTE:  this Docker Compose file does not contain the security services - namely the API Gateway and Secret Store

version: '3' 
volumes:
  db-data:
  log-data:
  consul-config:
  consul-data:
  portainer_data:
  node-red-data:
  rsp-cache:
  rsp-config:

services:
  volume:
    image: edgexfoundry/docker-edgex-volume:1.0.0
    container_name: edgex-files
    networks:
      edgex-network:
        aliases:
            - edgex-files
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data

  # EDGEX DEBUG
  consul:
    image: consul:1.3.1
    ports:
      - "8400:8400"
      - "8500:8500"
      - "8600:8600"
    container_name: edgex-core-consul
    hostname: edgex-core-consul
    networks:
      edgex-network:
        aliases:
            - edgex-core-consul
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - volume

  config-seed:
    image: edgexfoundry/docker-core-config-seed-go:1.0.0
    container_name: edgex-config-seed
    hostname: edgex-core-config-seed
    networks:
      edgex-network:
        aliases:
            - edgex-core-config-seed
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - volume
      - consul

  mongo:
    image: edgexfoundry/docker-edgex-mongo:1.0.1
    ports:
      - "27017:27017"
    container_name: edgex-mongo
    hostname: edgex-mongo
    networks:
      edgex-network:
        aliases:
            - edgex-mongo
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - volume

  logging:
    image: edgexfoundry/docker-support-logging-go:1.0.1
    ports:
      - "48061:48061"
    depends_on:
      - mongo
      - volume

  system:
    image: edgexfoundry/docker-sys-mgmt-agent-go:1.0.1
    ports:
      - "48090:48090"
    container_name: edgex-sys-mgmt-agent
    hostname: edgex-sys-mgmt-agent
    networks:
      edgex-network:
        aliases:
            - edgex-sys-mgmt-agent
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - logging

  notifications:
    image: edgexfoundry/docker-support-notifications-go:1.0.1
    ports:
      - "48060:48060"
    container_name: edgex-support-notifications
    hostname: edgex-support-notifications
    networks:
      edgex-network:
        aliases:
            - edgex-support-notifications
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - logging

  metadata:
    image: edgexfoundry/docker-core-metadata-go:1.0.1
    ports:
      - "48081:48081"
    container_name: edgex-core-metadata
    hostname: edgex-core-metadata
    networks:
      edgex-network:
        aliases:
            - edgex-core-metadata
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - logging

  data:
    image: edgexfoundry/docker-core-data-go:1.0.1
    ports:
      - "48080:48080"
    networks:
      edgex-network:
        aliases:
            - edgex-core-data
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - logging

  command:
    image: edgexfoundry/docker-core-command-go:1.0.1
    ports:
      - "48082:48082"
    container_name: edgex-core-command
    hostname: edgex-core-command
    networks:
      edgex-network:
        aliases:
            - edgex-core-command
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - metadata

  # scheduler:
  #   image: edgexfoundry/docker-support-scheduler-go:1.0.1
  #   ports:
  #     - "48085:48085"
  #   container_name: edgex-support-scheduler
  #   hostname: edgex-support-scheduler
  #   networks:
  #     edgex-network:
  #       aliases:
  #           - edgex-support-scheduler
  
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - metadata

  export-client:
    image: edgexfoundry/docker-export-client-go:1.0.1
    ports:
      - "48071:48071"
    container_name: edgex-export-client
    hostname: edgex-export-client
    networks:
      edgex-network:
        aliases:
            - edgex-export-client
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - data

  export-distro:
    image: edgexfoundry/docker-export-distro-go:1.0.1
    ports:
      - "48070:48070"
      - "5566:5566"
    container_name: edgex-export-distro
    hostname: edgex-export-distro
    networks:
      edgex-network:
        aliases:
            - edgex-export-distro
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - export-client
    environment:
      - EXPORT_DISTRO_CLIENT_HOST=export-client
      - EXPORT_DISTRO_DATA_HOST=edgex-core-data
      - EXPORT_DISTRO_CONSUL_HOST=edgex-config-seed
      - EXPORT_DISTRO_MQTTS_CERT_FILE=none
      - EXPORT_DISTRO_MQTTS_KEY_FILE=none

#################################################################
# App Services
#################################################################
  # LOSS PREVENTION
  checkout-lane-reconciler:
    image: test-reconciler-2:latest
    hostname: checkout-lane-reconciler
    ports:
      - "48096:48095"
      - "9083:9083"
    networks:
      - edgex-network
    volumes: 
      - ./reconciler_config/configuration.toml:/res/docker/configuration.toml
    depends_on:
      - data
    logging: 
      driver: "json-file"
      options: 
        max-size: "400k"
        max-file: "10"

#################################################################
# Device Services
#################################################################
  # RFID
  device-rsp-mqtt:
    image: mqtt-device-service:latest
    networks:
      - edgex-network 
    extra_hosts:
      - "mosquitto-server:172.17.0.1"
    depends_on:
      - logging
  # RTTL
  device-pos-mqtt:
    image: device-mqtt:latest
    # image: edgexfoundry/docker-device-mqtt-go:1.1.0-dev
    volumes:
      - ./mqttdevicepos/pos-device.yaml:/res/pos-device.yaml
    networks:
      - edgex-network
    extra_hosts:
      - "mosquitto-server:172.17.0.1"
    depends_on:
      - data
  # EdgeX - upstreamed needs to be validated with new REST Service
  device-rest:
    image: nrf-rest-device-service:1.0
    ports:
      - "48085:48085"
    networks:
      - edgex-network
    depends_on:
      - data
  
  # EDGIFY (CV)
  web:
    container_name: edgify-pos-ui-server
    image: 'gcr.io/edgify-framework/pos-ui-server'
    depends_on:
     - vs
    environment:
      - REACT_APP_PREDICTOR_HOST=localhost
    ports:
      - '3000:80'
    networks:
      - edgex-network
  broker:
    container_name: edgify-prediction-notify-broker
    image: 'gcr.io/edgify-framework/prediction-notify-broker'
    environment:
      - REACT_APP_PREDICTOR_HOST=localhost
      - EDGEX_API_ENDPOINT=http://device-rest:48085/api/v1/device/device-roi-rest/roi-enter
      - TOP_1_THRESHOLD=0.97
      - SAVE_PREDICTED_ROOT_FOLDER=/tmp/predicted_pictures
    ports:
      - '3001:3001'
    networks:
      - edgex-network
    volumes:
      - '/tmp/predicted_pictures/:/tmp/predicted_pictures'            
  predictor:
    container_name: edgify-prediction-server
    image: 'gcr.io/edgify-framework/toshiba-prediction-server:v0.10'
    #entrypoint:
    #  - python
    #  - ./edgify/runner.py    
    depends_on:
     - vs
    environment:
      - UI_HOST=broker
      - ANALYTICS_HOST=analytics
      - VIDEO_HOST=vs
      - PREDICTOR_TYPE=nrf_prediction_10_open_cv
    #  - DISPLAY=$DISPLAY
   #   - QT_X11_NO_MITSHM=1
    volumes:
      - '/home/nrf/edgify/hyper_params.yml:/app/edgify/_infra/configurations/conf/hyper_params.yml'
   #   - '/tmp/.X11-unix:/tmp/.X11-unix'      
    ports:
      - "5000:5000"
    networks:
      - edgex-network     
  vs:
    container_name: edgify-vs
    image: 'gcr.io/edgify-framework/async-video-streamer'
    # Camera parameters should be variables passed in (instead of hardcoded here)
    environment:
      - WIDTH=1280
      - HEIGHT=720
      - FRAME_RATE=30
      - SLEEPING_INTERVAL_BETWEEN_FRAMES=0.0
      - OPEN_CV_NUM_THREADS=1
      - INTERNAL_CAMERA=0
      - INTERNAL_CAMERA_INDEX=0
      - EXTERNAL_CAMERA=1
      - EXTERNAL_CAMERA_SOURCE=rtsp://admin:password1@192.168.1.61/Streaming/channels/1
      - CROP_X1=475
      - CROP_Y1=132
      - CROP_X2=795
      - CROP_Y2=470
      # - CROP_X1=89
      # - CROP_Y1=48
      # - CROP_X2=194
      # - CROP_Y2=171 
    #devices:
    #  - '/dev/video0:/dev/video0'  
    ports:
      - '8765:8765'
    networks:
      - edgex-network       
#  ds:
#    container_name: new-data-stream
#    image: 'gcr.io/edgify-framework/new-data-stream:v0.1'
#    ports:
#      - '8000:8000'
#    volumes:
#      - '~/ds_data:/data_stream/data'
#    networks:
#      - edgex-network      
  analytics:
    container_name: edgify-analytics
    image: 'gcr.io/edgify-framework/analytics'
    ports:
      - '8001:8001'       
    networks:
      - edgex-network          
  # END EDGIFY CV 
#################################################################
# Support Services
#################################################################
  # RFID
  acepoint-event-handler:
    # image: acepoint-event-handler:latest
    image: test-ace-point:latest
    restart: "always" 
    container_name: acepoint-event-handler
    hostname: acepoint-event-handler
    ports:
      - 42222:48096
    networks:
      - edgex-network
    depends_on:
      - device-rsp-mqtt
    logging: 
      driver: "json-file"
      options: 
        max-size: "200k"
        max-file: "10"
  # PIM
  pim-lookup:
    image: pim-lookup:latest
    ports:
      - "8083:8083"
    restart: "always"
    container_name: pim-lookup
    hostname: pim-lookup
    volumes: 
      - ./pim-lookup-config/nrf-products.json:/db_initialization/nrf-products-vol.json
    command: "/usr/local/bin/pim-lookup -file /db_initialization/nrf-products-vol.json"
    networks:
      - edgex-network

#################################################################
# UIs
#################################################################
  # EDGEX DEBUG
  ui:
    image: edgexfoundry/docker-edgex-ui-go:1.0.0
    ports:
      - "4000:4000"
    container_name: edgex-ui-go
    hostname: edgex-ui-go
    networks:
      edgex-network:
        aliases:
            - edgex-ui-go
    volumes:
      - db-data:/data/db
      - log-data:/edgex/logs
      - consul-config:/consul/config
      - consul-data:/consul/data
    depends_on:
      - data
      - command
  # LOSS PREVENTION (UI)
  node-red:
    image: nodered/node-red
    container_name: mynodered
    hostname: mynodered
    environment: 
      - TZ=America/New_York
    volumes:
      - node-red-data:/data
      - /home/nrf/node-red/settings.js:/data/settings.js
      - /home/nrf/product_images:/usr/images
    ports:
      - 1880:1880 
    networks:
      - edgex-network
  # LOSS PREVENTION (UI)
  edgex-demo-ui:
    image: iotech/demo-ui:latest
    ports:
      - "4200:80"
    container_name: edgex-demo-ui
    hostname: edgex-demo-ui
    networks:
      - edgex-network
    depends_on:
      - checkout-lane-reconciler


#################################################################
# RSP Containers and mqtt broker 
#################################################################
  # RFID
  avahi:
    image: rsp/avahi:0.1
    # environment:
      # LOG_LEVEL: debug
      # CAP_HOST_MANAGEMENT: 1
    # ipc: host
    network_mode: host
    # pid: host
    # userns_mode: host
    privileged: true
    restart: always
    # networks:
      # - rsp_gw_net
    volumes:
      - /var/run/dbus:/var/run/dbus
    # deploy:
      # mode: global
      # placement:
        # constraints: [node.platform.os == linux]

  ntp:
    image: rsp/ntp:0.1   
    network_mode: host
    cap_add:
     - SYS_TIME
    restart: always

  mosquitto:
    image: rsp/mosquitto:0.1
    # environment:
      # LOG_LEVEL: debug
      # CAP_HOST_MANAGEMENT: 1
    # ipc: host
    # network_mode: host
    # pid: host
    # privileged: true
    # userns_mode: host
    restart: always
    # networks:
      # - rsp_gw_net
    ports:
      - 1883:1883
    # deploy:
      # mode: global
      # placement:
        # constraints: [node.platform.os == linux]
    # depends_on:
    #   - avahi
      
  rsp-gw:
    image: rsp/sw-toolkit-gw:0.1
    environment:
      DOCKER_HOST_IP: ${HOST_IP}
      DOCKER_HOSTNAME: ${HOSTNAME}
      # LOG_LEVEL: debug
      # CAP_HOST_MANAGEMENT: 1
    # ipc: host
    network_mode: host
    # pid: host
    # privileged: true
    # userns_mode: host
    restart: always
    volumes:
      - rsp-cache:/opt/rsp-sw-toolkit-gw/cache/
      - rsp-config:/opt/rsp-sw-toolkit-gw/config/
    # networks:
      # rsp_gw_net:
        # aliases:
          # - ${HOSTNAME}
    ports:
      - 5222:5222
      - 8080:8080
      - 8443:8443
    # deploy:
      # mode: global
      # placement:
        # constraints: [node.platform.os == linux]
    depends_on:
      - mosquitto
    # END RFID

#################################################################
# Tooling
#################################################################
  # MANAGEMENT - SHOULD BE DEPLOYED SEPARATELY NOT IN THE LP STACK
  portainer:
    image:  portainer/portainer
    ports:
      - "9000:9000"
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    depends_on:
      - volume

networks:
  edgex-network:
    driver: "bridge"
...
